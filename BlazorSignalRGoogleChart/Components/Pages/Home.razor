@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@using BlazorSignalRGoogleChart.Application.PizzaToppings.Queries
@using BlazorSignalRGoogleChart.Domain.Entities
@using Mediator
@using System.Text.Json
@inject IMediator _mediator

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

<hr />
<div class="row">
    <div class="col-7">
        <div id="chart_div"></div>
    </div>
    <div class="col-5">
        <ul class="list-group">
            @foreach (var item in toppings)
            {
                <li class="list-group-item">
                    <div class="btn-group" role="group" aria-label="Basic mixed styles example">
                        <button type="button" class="@item.ColorBtn" disabled title="NameTopping">@item.Topping</button>
                        <button @onclick="@(e => RemoveSlice(item.Id))" type="button" class="btn btn-warning" title="RemoveSlice"><i class="fa-solid fa-minus"></i></button>
                        <button @onclick="@(e => AddSlice(item.Id))" type="button" class="btn btn-success" title="AddSlice">
                            <i class="fa-solid fa-plus"></i>
                            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                                @item.Slices+
                                <span class="visually-hidden">unread messages</span>
                            </span>
                        </button>
                    </div>
                </li>
            }
        </ul>
    </div>
</div>


@code {
    List<PizzaTopping> toppings = [];
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            toppings = await _mediator.Send(new GetToppingsListsQuery());
            StateHasChanged();
            var toppingsJson = JsonSerializer.Serialize(toppings);
            await JSRuntime.InvokeVoidAsync("drawChart", toppingsJson);
        }
    }

    private async void AddSlice(int id)
    {
        if (hubConnection is not null)
        {
            await _mediator.Send(new AddSliceCommand() { PizzaToppingId = id });
            toppings = await _mediator.Send(new GetToppingsListsQuery());
            StateHasChanged();
            var toppingsJson = JsonSerializer.Serialize(toppings);
            await JSRuntime.InvokeVoidAsync("drawChart", toppingsJson);
            
            await hubConnection.SendAsync("AddSlidesSignalR", toppingsJson);
        }

    }

    private async void RemoveSlice(int id)
    {
        int dd = await _mediator.Send(new RemoveSliceCommand() { PizzaToppingId = id });
        toppings = await _mediator.Send(new GetToppingsListsQuery());
        StateHasChanged();
        var toppingsJson = JsonSerializer.Serialize(toppings);
        await JSRuntime.InvokeVoidAsync("drawChart", toppingsJson);
    }



    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/googlecharthub"))
            .Build();

        hubConnection.On<string>("ReceiveIdPizzaTopping", (toppingsjson) =>
        {            
            InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     hubConnection = new HubConnectionBuilder()
    //         .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
    //         .Build();

    //     hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
    //     {
    //         var encodedMsg = $"{user}: {message}";
    //         messages.Add(encodedMsg);
    //         InvokeAsync(StateHasChanged);
    //     });

    //     await hubConnection.StartAsync();
    // }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}


@page "/"

@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IMediator _mediator
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorSignalRGoogleChart.Application.PizzaToppings.Queries
@using BlazorSignalRGoogleChart.Domain.Entities
@using Mediator
@using System.Text.Json
@implements IAsyncDisposable

<div class="container px-4 py-4">
    <h2 class="pb-2 border-bottom">Goolgle Charts</h2>
    <div class="row mb-3 text-center px-4 py-4">        
        <div class="col-sm-6 col-lg-8 themed-grid-col d-flex justify-content-center align-items-center">
            
            <div id="chart_div" style="width:600px; height:400px;"></div>
        </div>
        <div class="col-sm-6 col-lg-4 themed-grid-col">
            <ul class="list-group">
                @foreach (var item in toppings)
                {
                    <li class="list-group-item">
                        <div class="btn-group" role="group" aria-label="Basic mixed styles example">
                            <button type="button" class="@item.ColorBtn" disabled title="NameTopping">@item.Topping</button>
                            <button @onclick="@(e => RemoveSlice(item.Id))" type="button" class="btn btn-warning" title="Remove Slice"><i class="fa-solid fa-minus"></i></button>
                            <button @onclick="@(e => AddSlice(item.Id))" type="button" class="btn btn-success" title="Add Slice">
                                <i class="fa-solid fa-plus"></i>
                                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                                    @item.Slices+
                                    <span class="visually-hidden">unread messages</span>
                                </span>
                            </button>
                        </div>
                    </li>
                }
            </ul>
        </div>
    </div>
    
</div>

@code {
    List<PizzaTopping> toppings = [];
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            toppings = await _mediator.Send(new GetToppingsListsQuery());
            StateHasChanged();
            var toppingsJson = JsonSerializer.Serialize(toppings);
            await JSRuntime.InvokeVoidAsync("drawChart", toppingsJson);
        }
    }

    private async void AddSlice(int id)
    {
        if (hubConnection is not null)
        {
            await _mediator.Send(new AddSliceCommand() { PizzaToppingId = id });
            toppings = await _mediator.Send(new GetToppingsListsQuery());
            StateHasChanged();
            var toppingsJson = JsonSerializer.Serialize(toppings);
            await JSRuntime.InvokeVoidAsync("drawChart", toppingsJson);

            await hubConnection.SendAsync("AddSlidesSignalR", toppingsJson);
        }
    }

    private async void RemoveSlice(int id)
    {
        if (hubConnection is not null)
        {
            await _mediator.Send(new RemoveSliceCommand() { PizzaToppingId = id });
            toppings = await _mediator.Send(new GetToppingsListsQuery());
            StateHasChanged();
            var toppingsJson = JsonSerializer.Serialize(toppings);
            await JSRuntime.InvokeVoidAsync("drawChart", toppingsJson);

            await hubConnection.SendAsync("AddSlidesSignalR", toppingsJson);           
        }        
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/googlecharthub"))
            .Build();

        hubConnection.On<string>("ReceiveIdPizzaTopping", (toppingsjson) =>
        {            
            InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

